generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id                      String            @id @default(cuid())
  first_name              String?           @db.VarChar(20)
  last_name               String?           @db.VarChar(20)
  license_number          String?           @db.VarChar(20)
  license_expiration      String?           @db.VarChar(20)   
  license_class           String?           @db.VarChar(1)
  current_location        String?           @db.VarChar(20)
  expected_locations      Json?
  in_range                Boolean?          @default(false)
  is_available            Boolean?          @default(true)
  driver_reports_ready    Boolean?          @default(false)
  driver_status           Availability_Status     @default(AVAILABLE)
  assigned_truck_id       String?
  phone_number            String?           @db.VarChar(15)
  emergency_contact       String            @db.VarChar(20)
  emergency_contact_phone String            @db.VarChar(15)
  certifications          String[]
  drug_test_current       Boolean?
  current_coordinates     Json? 
  employment_status       Employment_Status @default(HIRED)
  hire_date               DateTime?         @db.Date
  // Remove user_id field since id now serves this purpose
  attributes              Json?
  loads                   Load[]
  user                    User              @relation(fields: [id], references: [id], onUpdate: NoAction)
  trucks                  Truck?            @relation(fields: [assigned_truck_id], references: [id], onUpdate: NoAction)
}

model Week {
  id                      String @id @default(cuid())
  week_start              DateTime
  week_end                DateTime
  day_1_hours             String?
  day_2_hours             String?
  day_3_hours             String?
  day_4_hours             String?
  day_5_hours             String?
  day_6_hours             String?
  day_7_hours             String?
  day_1_stop              String?
  day_2_stop              String?
  day_3_stop              String?
  day_4_stop              String?
  day_5_stop              String?
  day_6_stop              String?
  day_7_stop              String?


  userId                String
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Trailer {
  id                        String    @id @default(cuid())
  assigned_truck_id         String?
  current_location          String?   @db.VarChar(20)
  has_registration          Boolean?  @default(true)
  bureaucratically_sound    Boolean?  @default(true)
  correct_equipment_working Boolean?  @default(true)
  in_range_first_stop       Boolean?  @default(false)
  make                      String    @db.VarChar(20)
  model                     String    @db.VarChar(20)
  year                      Int?
  max_cargo_capacity        Decimal?  @db.Decimal(7, 2)
  current_cargo_weight      Decimal?  @db.Decimal(7, 2)
  license_plate             String?   @db.VarChar(20)
  registration_expiry       DateTime? @db.Date
  last_inspection_date      DateTime? @db.Date
  next_inspection_due       DateTime? @db.Date
  trailer_status            Availability_Status @default(AVAILABLE)
  required_permits          String[]
  assigned_fleet            String? 
  insurance_valid           Boolean?
  current_coordinates Json? 
  attributes                Json? 
  load                      Load[]
  truck_id                  Truck?    @relation(fields: [assigned_truck_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fleet                     Fleet?      @relation(fields: [assigned_fleet], references: [id], onDelete: NoAction) 
}

model Load {
  id               String    @id @default(cuid())
  origin           String    @db.VarChar(20)
  destination      String    @db.VarChar(20)
  weight           Decimal
  due_by           DateTime  @default(now())
  status           Status
  started_at       DateTime?
  assigned_driver  String?
  assigned_trailer String?
  assigned_truck   String?
  assigned_by      String?
  percent_complete Int       @default(0)
  is_active        Boolean   @default(true)
  assigned_fleet   String?
  current_coordinates Json? 
  attributes       Json? 
  createdAt        DateTime @default(now())
  truck            Truck?    @relation(fields: [assigned_truck], references: [id], onDelete: NoAction, onUpdate: NoAction)
  driver           Driver?   @relation(fields: [assigned_driver], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trailer          Trailer?  @relation(fields: [assigned_trailer], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fleet            Fleet?     @relation(fields: [assigned_fleet], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dispatcher       User?      @relation(fields: [assigned_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CustomerRequest {
  id          String @id @default(cuid())
  origin      String @db.VarChar(20)
  destination String @db.VarChar(20)
  status      Status
}

model Fleet {
  id             String  @id @default(cuid())
  fleet_name     String?
  fleet_homebase String?

  Truck Truck[]
  User User[]
  Load Load[]

  Trailer Trailer[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Truck {
  id               String    @id @default(cuid())
  license_plate    String    @unique @db.VarChar(20)
  make             String    @db.VarChar(20)
  model            String    @db.VarChar(20)
  year             Int?
  capacity_tons    Decimal?  @db.Decimal(5, 2)
  mileage          Int?
  is_active        Boolean?  @default(true)
  current_location String?   @db.VarChar(20)
  truck_status     Availability_Status @default(AVAILABLE)
  assigned_driver  Boolean?  @default(false)
  driver_id        String?
  assigned_trailer Boolean?  @default(false)
  trailer_id       String?
  truck_number     String? 
  current_coordinates Json? 
  // This would be "permit": Expiration Time. 
  required_certs   Json? 
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  next_maintenance_date DateTime?
  driver           Driver[]
  trailer          Trailer[]
  load             Load[]
  attributes       Json?
  assigned_fleet_id String?
  fleet   Fleet? @relation(fields: [assigned_fleet_id], references: [id], onDelete: NoAction)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(DRIVER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  attached_driver        Driver?
  timeOffStart DateTime?
  timeOffEnd   DateTime?
  weeks          Week[] 
  accounts      Account[]
  sessions      Session[]
  assigned_fleet  String?
  attributes      Json? 
  fleet      Fleet? @relation(fields: [assigned_fleet], references: [id], onDelete: NoAction)

  assignments Load[]

  TimeOffRequest TimeOffRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimeOffRequest {
  id    String @default(cuid()) @unique
  timeOffStart  DateTime?
  timeOffEnd    DateTime?
  requestingUser  String
  status        Time_Off_Status?
  reason        String? @db.Text()

  user  User @relation(fields: [requestingUser], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  ADMIN
  USER
  DISPATCHER
  DRIVER
}

enum Status {
  TERMINATED
  SUGGESTED
  IN_PROGRESS
  PENDING
  REQUESTED
  UNASSIGNED
  DELIVERED
}

enum Employment_Status {
  HIRED
  SUSPENDED_WITH_PAY
  SUSPENDED_NO_PAY
  TERMINATED
  SECONDARY_DUTY
}

enum Availability_Status {
  AVAILABLE
  ASSIGNED
  HAS_EMERGENCY
  UNAVAILABLE
  SUGGESTED
  SECONDARY_DUTY
}

enum Time_Off_Status {
  APPROVED
  DENIED
  POSTPONE
  PENDING
}